プロジェクト(project):
グルーピングというかくくりというか。トップレベルのCMakeFiles.txt(後述)
でprojectコマンドを使ってプロジェクトを宣言する必要がある。あるいは、
projectコマンドを使ってプロジェクトを宣言したCMakeFiles.txtがトップレ
ベルプロジェクトとみなされるともいえるかもしれない。IDEや他のビルドシ
ステム(e.g. Gradle)で言うところのプロジェクトに当たりそう。

ターゲット(target):
makeでいうターゲットのそれ。成果物。よく使うものに2種類ある。他にもあ
る。
- 実行可能ターゲット(executable target)
  プロジェクトが出力する実行可能ファイル
- ライブラリターゲット(library target)
  プロジェクトが出力するライブラリ(.aとか、もしかすると.soとか)

CMakeファイル:
CMakeの設定には同じ言語(CMake言語とでも言うべきか)で書かれた2種類のファ
イルがある
- CMakeFiles.txt
  CMakeFiles.txtが置かれたディレクトリについてのビルド設定を管理するこ
  とができる。
- *.cmake
  各所で共通に使われるモジュール。組み込みのモジュールについては
  cmake-modules(7)を参照のこと。

変数(variable)とプロパティ(property):
どちらも情報を保持するための機構。変数は独立で使うのが基本で、プロパティ
は何らかの主体(ターゲットなど)に紐づくと考えるのが基本である。プログラ
ミング言語で例える[1]と、CMake変数が(ローカル、あるいはグローバル)変数、
CMakeプロパティがクラス変数に当たる。グローバルプロパティはさしづめシ
ングルトンオブジェクトのクラス変数である。CMakeには多分キャッシュされ
ないグローバル変数が存在しないので、グローバルプロパティはキャッシュさ
れないグローバル変数として有用である。多分。また、ターゲットに紐づくプ
ロパティは、ターゲットごとにプログラミング言語のバージョンを変えたい場
合などに有用である。変数はsetで、プロパティはset_propatiesもしくは
set_target_propatiesで設定できる。

変数はキャッシュされた変数(キャッシュ変数)として宣言することができる。
キャッシュして値をファイルに永続化することで、例えば、コマンドラインと
かからオプションを何度も設定せずに済むということらしい。また、キャッシュ
変数はCMake GUIやccmake等で設定可能なようだ。(キャッシュ変数は個人的に
は気に食わない仕様。単にビルド時に設定ファイルを指定するのではだめなの
か。)

optionコマンドは特殊なsetと見ることができて、ONもしくはOFFを指定するブー
ル変数として設定する。CMakeはすべての値を文字列として扱うことに注意。
optionで設定しても、ブール値として解釈されることを期待する文字列値にな
る。optionで設定された変数はおそらくキャッシュ変数になる。詳しくは
optionのドキュメントを参照のこと。

変数にはスコープがある。
- 関数スコープ
- ディレクトリスコープ
  各CMakeFiles.txtはスコープを作る。あるCMakeFiles.txtは上位の
  CMakeFiles.txtのディレクトリスコープ変数を継承する。グローバルではな
  いので、下位のCMakeFiles.txtで変数を変更しても、上位のCMakeFiles.txt
  には反映されない。
- 永続キャッシュ
  キャッシュ変数。グローバル変数。

プロパティにはスコープがある。詳しくはset_propertyコマンドのドキュメン
トを参照のこと。
- ターゲットスコープ
  特定のターゲットに紐づく。
- ディレクトリスコープ
  特定のディレクトリに紐づく。
- グローバルスコープ
  どこでも使うことができるプロパティ。キャッシュされないグローバル変数
  として有用。
他にもある。

CMakeは環境変数を扱うことができる。変数と同様にsetで設定する。
$ENV{変数名}という形式で参照する。CMakeはいくつかの環境変数を特別に扱
う。特筆すべきはCC(デフォルトのCコンパイラ)、CXX(デフォルトのC++コンパ
イラ)、LDFLAGS(リンカのオプションのデフォルト)。詳しくは
cmake-env-variables(7)を参照のこと。

CMakeはリスト構造を扱うことができる。リストは;(セミコロン)区切りの文字
列として扱う。

外部ビルド(ソースツリーの外でのビルド):
CMakeは外部ビルドをサポートしており、ソースツリーの外にビルドディレク
トリを作ることができる。それぞれをSOURCE_DIR及びBINARY_DIRという接尾辞
が付いた変数で扱うことができる。多分。

----
1. https://stackoverflow.com/questions/49958208/what-is-the-difference-between-cmake-variables-and-properties
